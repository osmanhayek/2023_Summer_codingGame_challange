#include <iostream>
#include <jsoncpp/json/json.h>
#include <cstring>
#include <unordered_map>
#include <vector>
#include <set>
#include <locale>
using namespace std;



/**
 * @param n_gears An integer representing the number of gears in the system (numbered from 0 to N-1).
 * @param connections An array representing all pairs of gears connected together.
 * @return An array of two integers representing the number of gears rotating clockwise and counterclockwise respectively, or [-1, -1] if the configuration is invalid.
 */
void rec(int a, const unordered_map<int, vector<int>>& hash, int size, unordered_map<int, int>& rotate, int& b)
{
    static unordered_map<int, int> did;

    if (b == -1 || did.count(a))
        return;

    did[a] = 1;

    if (rotate.count(a))
    {
        for (auto& c : hash.at(a))
        {
            if (rotate[c] == rotate[a])
            {
                b = -1;
                return;
            }
            rotate[c] = -rotate[a];
        }
    }

    for (auto& c : hash.at(a))
    {
        if (did.count(c))
            continue;
        rec(c, hash, size, rotate, b);
    }
}

vector<int> gearBalance(int n_gears, vector<vector<int>> connections)
{
    unordered_map<int, vector<int>> hash;
    unordered_map<int, int> rotate;
    hash.reserve(n_gears);
    rotate.reserve(n_gears);

    for (auto& con : connections)
    {
        hash[con[0]].push_back(con[1]);
        hash[con[1]].push_back(con[0]);
    }

    rotate[0] = 1;
    int check = 0;
    rec(0, hash, n_gears, rotate, check);

    if (check == -1)
        return {-1, -1};

    int a1 = 0, a2 = 0;

    for (auto& m : rotate)
    {
        if (m.second == 1)
            a1++;
        else
            a2++;
    }

    return {a1, a2};
}

/* Ignore and do not change the code below */

void trySolution(vector<int> output) {
  Json::Value output_json;

  output_json = Json::Value(Json::arrayValue);
  Json::Value current_value;
  for (int i = 0 ; i < output.size() ; i++) {
    current_value = Json::Value(output[i]);
    output_json.append(current_value);
  }

  Json::FastWriter fastWriter;
  std::string output_str = fastWriter.write(output_json);
  cout << "" << output_str.c_str();
}

int main () {
  setlocale(LC_ALL, "en_US.UTF-8");
  Json::Reader reader;
  string line;
  Json::Value parsed_json;
  std::getline(std::cin, line, '\n');
  reader.parse(line, parsed_json);
  int n_gears = parsed_json.asInt();
  std::getline(std::cin, line, '\n');
  reader.parse(line, parsed_json);

  vector<vector<int>> array;
  for (int i = 0 ; i < parsed_json.size() ; i++) {
  
    vector<int> array2;
    for (int j = 0 ; j < parsed_json[i].size() ; j++) {
      array2.push_back(parsed_json[i][j].asInt());
    }
    array.push_back(array2);
  }
  vector<vector<int>> connections = array;

  vector<int> output = gearBalance(n_gears, connections);
  trySolution(output);
}
/* Ignore and do not change the code above */
