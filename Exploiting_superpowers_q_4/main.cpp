#include <iostream>
#include <jsoncpp/json/json.h>
#include <cstring>
#include <unordered_map>
#include <vector>
#include <set>
#include <locale>
using namespace std;



/**
 * @param instructions The list of instructions as memorized by the mutant.
 * @param target The coordinates (x, y) of the target.
 * @return A string respecting the given format to fix the mutant's path.
 */


vector<int> hesapla(vector<string> instructions)
{
  int netMoveY = 0, netMoveX = 0;
  int flag = 0;
  
  for (auto move : instructions)
  {
    if (move == "FORWARD")
    {
      if (flag % 2 == 0)
        netMoveX = flag == 0 ? netMoveX + 1 : netMoveX - 1;
      else
        netMoveY = flag == 3 ? netMoveY + 1 : netMoveY - 1;
    }
    else if (move == "BACK")
    {
      if (flag % 2 == 0)
        netMoveX = flag == 0 ? netMoveX - 1 : netMoveX + 1;
      else
        netMoveY = flag == 3 ? netMoveY - 1 : netMoveY + 1;
    }
    else if (move == "TURN RIGHT")
      flag = flag == 3 ? 0 : flag + 1;
    else if (move == "TURN LEFT")
      flag = flag == 0 ? 3 : flag - 1;
  }
  return {netMoveX, netMoveY};
}

string findCorrectPath(vector<string> instructions, vector<int> target)
{
  vector<int> wrongIn;
  string oncesi;
  for (int i = 0; i < instructions.size(); i++)
  {
    oncesi = instructions[i];
    instructions[i] = "FORWARD";
    if (target == hesapla(instructions))
      return ("Replace instruction " + to_string(i + 1) + " with FORWARD");
    instructions[i] = "BACK";
    if (target == hesapla(instructions))
      return ("Replace instruction " + to_string(i + 1) + " with BACK");
    instructions[i] = "TURN RIGHT";
    if (target == hesapla(instructions))
      return ("Replace instruction " + to_string(i + 1) + " with TURN RIGHT");
    instructions[i] = "TURN LEFT";
    if (target == hesapla(instructions))
      return ("Replace instruction " + to_string(i + 1) + " with TURN LEFT");
    instructions[i] = oncesi;
  }
  return ("");
}

/* Ignore and do not change the code below */

void trySolution(string recipe) {
  Json::Value output_json;
  output_json = Json::Value(recipe);

  Json::FastWriter fastWriter;
  std::string output_str = fastWriter.write(output_json);
  cout << "" << output_str.c_str();
}

int main () {
  setlocale(LC_ALL, "en_US.UTF-8");
  Json::Reader reader;
  string line;
  Json::Value parsed_json;
  std::getline(std::cin, line, '\n');
  reader.parse(line, parsed_json);

  vector<string> array;
  for (int i = 0 ; i < parsed_json.size() ; i++) {
    array.push_back(parsed_json[i].asString());
  }
  vector<string> instructions = array;
  std::getline(std::cin, line, '\n');
  reader.parse(line, parsed_json);

  vector<int> array_2;
  for (int i = 0 ; i < parsed_json.size() ; i++) {
    array_2.push_back(parsed_json[i].asInt());
  }
  vector<int> target = array_2;

  string output = findCorrectPath(instructions, target);
  trySolution(output);
}
/* Ignore and do not change the code above */
